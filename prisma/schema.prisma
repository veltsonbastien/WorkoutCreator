generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_CONNECTION_STRING")
}

model User {
  id             Int       @id @default(autoincrement())
  name           String?
  email          String    @unique
  emailVerified  DateTime?
  image          String?
  accounts       Account[]
  sessions       Session[]
  password       String?
  workouts       Workout[]
}

model Account {
  id                 Int       @id @default(autoincrement())
  userId             Int
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?
  access_token       String?
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?
  session_state      String?
  user               User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           Int       @id @default(autoincrement())
  sessionToken String    @unique
  userId       Int
  expires      DateTime
  user         User      @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
}

model Workout {
  id          Int       @id @default(autoincrement())
  userId      Int
  name        String
  date        DateTime  @default(now())
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  workoutExercises WorkoutExercise[] // Join table for exercises
}

model Exercise {
  id          Int       @id @default(autoincrement())
  name        String    @unique
}

//a specific exercise for a user's workout, with sets, reps and weight
model WorkoutExercise {
  id         Int       @id @default(autoincrement())
  workoutId  Int
  exerciseId Int
  sets       Int
  reps       Int
  weight     Float[]
  workout    Workout   @relation(fields: [workoutId], references: [id], onDelete: Cascade)
}